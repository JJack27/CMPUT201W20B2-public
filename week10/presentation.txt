                        _______________________

                         CMPUT201W20B2 WEEK 10

                              Abram Hindle
                        _______________________


Table of Contents
_________________

1. Week10
.. 1. Copyright Statement
..... 1. License
..... 2. Hazel Code is licensed under AGPL3.0+
.. 2. Alternative version
.. 3. Init ORG-MODE
..... 1. Org export
..... 2. Org Template
.. 4. Remember how to compile?
.. 5. Preprocessor stuff like if-def
..... 1. Multiple Files?
..... 2. Example
..... 3. Linking to libraries
..... 4. Example Datastructure
..... 5. What is the preprocessor doing?
..... 6. Parameterized Macros
.. 6. Makefiles
..... 1. Basic Makefile
..... 2. DRY Makefile
..... 3. Idiomatic GCC Makefile
..... 4. Special Macro Vars
..... 5. Can we lint and valgrind with our makefiles?
..... 6. .PHONY
..... 7. Makefile help
..... 8. Useful Tool! asan and usan





1 Week10
========

1.1 Copyright Statement
~~~~~~~~~~~~~~~~~~~~~~~

  If you are in CMPUT201 at UAlberta this code is released in the public
  domain to you.

  Otherwise it is (c) 2020 Abram Hindle, Hazel Campbell AGPL3.0+


1.1.1 License
-------------

  CMPUT 201 C Notes Copyright (C) 2020 Abram Hindle, Hazel Campbell

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as
  published by the Free Software Foundation, either version 3 of the
  License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Affero General Public License for more details.

  You should have received a copy of the GNU Affero General Public
  License along with this program. If not, see
  <https://www.gnu.org/licenses/>.


1.1.2 Hazel Code is licensed under AGPL3.0+
-------------------------------------------

  Hazel's code is also found here
  <https://github.com/hazelybell/examples/tree/C-2020-01>

  Hazel code is licensed: The example code is licensed under the AGPL3+
  license, unless otherwise noted.


1.2 Alternative version
~~~~~~~~~~~~~~~~~~~~~~~

  Checkout the .txt, the .pdf, and the .html version


1.3 Init ORG-MODE
~~~~~~~~~~~~~~~~~

  ,----
  | ;; I need this for org-mode to work well
  | ;; If we have a new org-mode use ob-shell
  | ;; otherwise use ob-sh --- but not both!
  | (if (require 'ob-shell nil 'noerror)
  |   (progn
  |     (org-babel-do-load-languages 'org-babel-load-languages '((shell . t))))
  |   (progn
  |     (require 'ob-sh)
  |     (org-babel-do-load-languages 'org-babel-load-languages '((sh . t)))))
  | (org-babel-do-load-languages 'org-babel-load-languages '((C . t)))
  | (org-babel-do-load-languages 'org-babel-load-languages '((python . t)))
  | (setq org-src-fontify-natively t)
  | (setq org-confirm-babel-evaluate nil) ;; danger!
  | (custom-set-faces
  |  '(org-block ((t (:inherit shadow :foreground "black"))))
  |  '(org-code ((t (:inherit shadow :foreground "black")))))
  `----


1.3.1 Org export
----------------

  ,----
  | (org-html-export-to-html)
  | (org-latex-export-to-pdf)
  | (org-ascii-export-to-ascii)
  `----


1.3.2 Org Template
------------------

  Copy and paste this to demo C

  ,----
  | #include <stdio.h>
  | 
  | int main(int argc, char**argv) {
  |     return 0;
  | }
  `----


1.4 Remember how to compile?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  gcc -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -o programname
  programname.c


1.5 Preprocessor stuff like if-def
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  The preprocessor deals with all the lines that you start with an
  octalthrope or hash mark: #

  The preprocessor lets you define symbols, macros, and include files.


1.5.1 Multiple Files?
---------------------

  How does stdio.h work?

  <file:/usr/include/stdio.h>

  It defines definitions, macros, and prototypes for the stdio library.
  The linker will link your executable to that library that was already
  compiled.

  .h files help us organize C programs by including definitions for the
  object files and libraries that we will create.

  Libc or glibc contains the implemention of those definitions.
  libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f919f994000)

  libc is composed of many .c files compiled into .o object files and
  then combined into a library. A library is like an executable that
  other executables rely on for code. malloc is defined in malloc.c and
  has a malloc.h file!

  Typically if I make a library I will make a .h file so the definitions
  can be shared with other .c files. But the implementation of the
  functions will go into a .c file that includes that .h as well.

  - main.c
    - #include <stdio.h>
    - #include "library.h"
    - relies on library.o
  - library.c
    - #include "library.h"
    - makes library.o
  - library.h
    - defines functions and definitions from library.c


1.5.2 Example
-------------

  This is a useful function to check if scanf read 1 or more elements
  and didn't read EOF.

  <file:./checkinput.c>

  ,----
  | #include "checkinput.h"
  | #include <stdio.h>
  | #include <stdlib.h>
  | /* checkInput: given the result of scanf check if it 
  |  * 0 elements read or EOF. If so exit(1) with a warning.
  |  *
  |  */
  | void checkInput(int err) {
  |   if (!err || err == EOF) {
  |     printf("\nInvalid input!\n");
  |     exit(1);
  |   }
  | }
  `----

  <file:./checkinput.h>

  ,----
  | // Have a guard to ensure that we don't include it multiple times.
  | #ifndef _CHECKINPUT_H_
  | /* checkInput: given the result of scanf check if it 
  |  * 0 elements read or EOF. If so exit(1) with a warning.
  |  *
  |  */
  | #define _CHECKINPUT_H_
  | void checkInput(int err); // a prototype!
  | #endif
  `----

  <file:./checkinput-driver.c>

  ,----
  | #include "checkinput.h"
  | #include <stdio.h>
  | #include "checkinput.h"
  | #include "checkinput.h"
  | #include "checkinput.h"
  | #include "checkinput.h"
  | 
  | // void checkInput(int err); // a prototype!
  | 
  | 
  | int main() {
  |   int input;
  |   checkInput(scanf("%d", &input));  
  |   puts("Good Input!");
  | }
  `----


* 1.5.2.1 Compiling Multiple Files Easy Mode

  We can put all our .c files on the same line and compile them all at
  once! This is handy. But quite limiting.

  We can't parallel compile. We can't use all our cores. We can't
  interupt compilation.

  ,----
  | # build checkinput-driver
  | gcc  -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 \
  |        -o checkinput-driver checkinput-driver.c && \
  | ( echo YES | ./checkinput-driver  || \
  |   echo 100 | ./checkinput-driver )
  `----

  BOTH FILES

  ,----
  | # build checkinput-driver
  | gcc  -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 \
  |        -o checkinput-driver checkinput-driver.c \
  |        checkinput.c && \
  | ( echo YES | ./checkinput-driver  || \
  |   echo 100 | ./checkinput-driver )
  `----

  ,----
  | 
  | Invalid input!
  | Good Input!
  `----


* 1.5.2.2 Compiling Multiple Files with Linking

  OK now we compile it. The main is the last to compile and it needs all
  the .o files.

  All the .c files that don't contain main need to be compiled to object
  files. Use the -c flags to do this.

  ,----
  | # build checkinput.o
  | gcc  -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 \
  |        -c checkinput.c
  | file checkinput.o
  | # build checkinput-driver and link it to checkinput.o
  | gcc  -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 \
  |        -c checkinput-driver.c
  | file checkinput-driver.o
  | gcc  -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 \
  |        -o checkinput-driver checkinput-driver.o \
  |        checkinput.o
  | file checkinput-driver
  `----

  ,----
  | checkinput.o: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), with debug_info, not stripped
  | checkinput-driver.o: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), with debug_info, not stripped
  | checkinput-driver: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/l, for GNU/Linux 3.2.0, BuildID[sha1]=a0d9427bff4f04c1475aa889bce881e4a5b7fb31, with debug_info, not stripped
  `----


  - If you want some translation :-)
    - ELF - Executable and Linking format
    - relocatable - you can link it
    - shared object - relocatable and executable
    - LSB - little endian/least significant bit
    - x86-64 - 64 bit x86 processor
    - version 1 (SYSV) - version 1 of ELF System V Unix spec.

  Test drive it

  ,----
  | echo    | ./checkinput-driver # bad
  | echo X  | ./checkinput-driver # bad
  | echo 1  | ./checkinput-driver # good
  | echo -1 | ./checkinput-driver # good
  `----

  ,----
  | 
  | Invalid input!
  | 
  | Invalid input!
  | Good Input!
  | Good Input!
  `----


  Now let's see how it is linked!

  ,----
  | ls -l ./checkinput-driver
  | ls -l /lib/x86_64-linux-gnu/libc-2.27.so
  | ldd ./checkinput-driver
  `----

  ,----
  | -rwxrwxr-x 1 hindle1 hindle1 38472 Mar 19 11:31 ./checkinput-driver
  | -rwxr-xr-x 1 root root 2030544 Apr 16  2018 /lib/x86_64-linux-gnu/libc-2.27.so
  | 	linux-vdso.so.1 (0x00007ffed5fe8000)
  | 	libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fe864229000)
  | 	/lib64/ld-linux-x86-64.so.2 (0x00007fe86481c000)
  `----


  - syscalls (read, write, gettimeofday) and libc (libc is stuff like
    stdio.h)


1.5.3 Linking to libraries
--------------------------

  `math.h` includes fun functions like cos and tanh.

  Math.h, part of the C stdlib, is distributed as a seperate library.
  Not all computers have floating point numbers so why bother compiling
  floating code for them?

  <file:/usr/include/math.h>

  I add the flag -lm so we get our math library :-)
  ,----
  | #include <stdio.h>
  | #include <math.h>
  | 
  | int main() {
  |     double x = 0.0;
  |     double th = tanh(x);
  |     double lh = th;
  |     do {
  |         lh = th;
  |         x += 0.5;
  |         th = tanh(x);
  |         printf("tanh(%e) == %e\n", x, th);
  |     } while( lh != th );
  | }
  `----

  ,----
  | tanh(5.000000e-01) == 4.621172e-01
  | tanh(1.000000e+00) == 7.615942e-01
  | tanh(1.500000e+00) == 9.051483e-01
  | tanh(2.000000e+00) == 9.640276e-01
  | tanh(2.500000e+00) == 9.866143e-01
  | tanh(3.000000e+00) == 9.950548e-01
  | tanh(3.500000e+00) == 9.981779e-01
  | tanh(4.000000e+00) == 9.993293e-01
  | tanh(4.500000e+00) == 9.997532e-01
  | tanh(5.000000e+00) == 9.999092e-01
  | tanh(5.500000e+00) == 9.999666e-01
  | tanh(6.000000e+00) == 9.999877e-01
  | tanh(6.500000e+00) == 9.999955e-01
  | tanh(7.000000e+00) == 9.999983e-01
  | tanh(7.500000e+00) == 9.999994e-01
  | tanh(8.000000e+00) == 9.999998e-01
  | tanh(8.500000e+00) == 9.999999e-01
  | tanh(9.000000e+00) == 1.000000e+00
  | tanh(9.500000e+00) == 1.000000e+00
  | tanh(1.000000e+01) == 1.000000e+00
  | tanh(1.050000e+01) == 1.000000e+00
  | tanh(1.100000e+01) == 1.000000e+00
  | tanh(1.150000e+01) == 1.000000e+00
  | tanh(1.200000e+01) == 1.000000e+00
  | tanh(1.250000e+01) == 1.000000e+00
  | tanh(1.300000e+01) == 1.000000e+00
  | tanh(1.350000e+01) == 1.000000e+00
  | tanh(1.400000e+01) == 1.000000e+00
  | tanh(1.450000e+01) == 1.000000e+00
  | tanh(1.500000e+01) == 1.000000e+00
  | tanh(1.550000e+01) == 1.000000e+00
  | tanh(1.600000e+01) == 1.000000e+00
  | tanh(1.650000e+01) == 1.000000e+00
  | tanh(1.700000e+01) == 1.000000e+00
  | tanh(1.750000e+01) == 1.000000e+00
  | tanh(1.800000e+01) == 1.000000e+00
  | tanh(1.850000e+01) == 1.000000e+00
  | tanh(1.900000e+01) == 1.000000e+00
  | tanh(1.950000e+01) == 1.000000e+00
  | tanh(2.000000e+01) == 1.000000e+00
  `----









  OK so how does this work, how do link to math?

  ,----
  | # build checkinput-driver and link it to checkinput.o
  | gcc  -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 \
  |        -o poor-tanh-example poor-tanh-example.c \
  |        -lm
  | file poor-tanh-example
  | ./poor-tanh-example | wc
  | ldd ./poor-tanh-example
  `----

  ,----
  | poor-tanh-example: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/l, for GNU/Linux 3.2.0, BuildID[sha1]=fdd28691d4637c2a9b9a76b129ea7585894e4378, with debug_info, not stripped
  |      40     120    1400
  | 	linux-vdso.so.1 (0x00007ffe7df99000)
  | 	libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f0a012af000)
  | 	libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f0a00ebe000)
  | 	/lib64/ld-linux-x86-64.so.2 (0x00007f0a0184f000)
  `----


  See that? libm.so.6 is in there.

  Larger programs link to lots of libraries.

  ,----
  | ldd `which xterm`
  `----

  ,----
  | linux-vdso.so.1 (0x00007ffe24fec000)
  | libXft.so.2 => /usr/lib/x86_64-linux-gnu/libXft.so.2 (0x00007fc47bb75000)
  | libfontconfig.so.1 => /usr/lib/x86_64-linux-gnu/libfontconfig.so.1 (0x00007fc47b930000)
  | libXaw.so.7 => /usr/lib/x86_64-linux-gnu/libXaw.so.7 (0x00007fc47b6bc000)
  | libXmu.so.6 => /usr/lib/x86_64-linux-gnu/libXmu.so.6 (0x00007fc47b4a3000)
  | libXt.so.6 => /usr/lib/x86_64-linux-gnu/libXt.so.6 (0x00007fc47b23a000)
  | libX11.so.6 => /usr/lib/x86_64-linux-gnu/libX11.so.6 (0x00007fc47af02000)
  | libXinerama.so.1 => /usr/lib/x86_64-linux-gnu/libXinerama.so.1 (0x00007fc47acff000)
  | libXpm.so.4 => /usr/lib/x86_64-linux-gnu/libXpm.so.4 (0x00007fc47aaed000)
  | libICE.so.6 => /usr/lib/x86_64-linux-gnu/libICE.so.6 (0x00007fc47a8d2000)
  | libutempter.so.0 => /usr/lib/x86_64-linux-gnu/libutempter.so.0 (0x00007fc47a6cf000)
  | libtinfo.so.5 => /lib/x86_64-linux-gnu/libtinfo.so.5 (0x00007fc47a4a5000)
  | libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fc47a0b4000)
  | libfreetype.so.6 => /usr/lib/x86_64-linux-gnu/libfreetype.so.6 (0x00007fc479e00000)
  | libXrender.so.1 => /usr/lib/x86_64-linux-gnu/libXrender.so.1 (0x00007fc479bf6000)
  | libexpat.so.1 => /lib/x86_64-linux-gnu/libexpat.so.1 (0x00007fc4799c4000)
  | libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fc4797a5000)
  | libXext.so.6 => /usr/lib/x86_64-linux-gnu/libXext.so.6 (0x00007fc479593000)
  | libSM.so.6 => /usr/lib/x86_64-linux-gnu/libSM.so.6 (0x00007fc47938b000)
  | libxcb.so.1 => /usr/lib/x86_64-linux-gnu/libxcb.so.1 (0x00007fc479163000)
  | libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fc478f5f000)
  | libbsd.so.0 => /lib/x86_64-linux-gnu/libbsd.so.0 (0x00007fc478d4a000)
  | /lib64/ld-linux-x86-64.so.2 (0x00007fc47c03a000)
  | libpng16.so.16 => /usr/lib/x86_64-linux-gnu/libpng16.so.16 (0x00007fc478b18000)
  | libz.so.1 => /lib/x86_64-linux-gnu/libz.so.1 (0x00007fc4788fb000)
  | libuuid.so.1 => /lib/x86_64-linux-gnu/libuuid.so.1 (0x00007fc4786f4000)
  | libXau.so.6 => /usr/lib/x86_64-linux-gnu/libXau.so.6 (0x00007fc4784f0000)
  | libXdmcp.so.6 => /usr/lib/x86_64-linux-gnu/libXdmcp.so.6 (0x00007fc4782ea000)
  | librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007fc4780e2000)
  | libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007fc477d44000)
  `----

  See! Lots of libraries!


* 1.5.3.1 Summary

  To link to a shared library with gcc or clang use the: -l flag
  -llibraryyouwant

  For libm use -lm for librt use -lrt

  If your library is not in the current lib path you will need to
  specify a library path use -L/path/to/library

  OK let's see how it affects you.


1.5.4 Example Datastructure
---------------------------

  Let's make a brief data structure about one of my favourite topics:
  cool bears.

  <file:./coolbears.c>

  ,----
  | #define _POSIX_C_SOURCE 200809L // <-- needed for strdup
  | #include "coolbears.h"
  | #include <stdio.h>
  | #include <stdlib.h>
  | #include <string.h>
  | // hiding struct details from other programmers
  | // I DONT TRUST THEM. Especially Hazel ;-) (don't tell hazel)
  | struct coolbear_t {
  |     char * name;
  |     float temperature;
  | };
  | 
  | CoolBear createCoolBear(char * name, float temperature) {
  |     CoolBear coolbear = malloc(sizeof(*coolbear));
  |     coolbear->name = strdup(name);
  |     coolbear->temperature = temperature;
  |     return coolbear;
  | }
  | void freeCoolBear(CoolBear coolBear) {
  |     if (coolBear == NULL) {
  |         abort();
  |     }
  |     if (coolBear->name != NULL) {
  |         free(coolBear->name);
  |     }
  |     free(coolBear);
  | }
  | char * getNameCoolBear(CoolBear coolbear) {
  |     return coolbear->name;
  | }
  | float    getTemperatureCoolBear(CoolBear coolbear) {
  |    return coolbear->temperature;
  | }
  | // NO MAIN!
  `----



  <file:./coolbears.h>

  ,----
  | // Have a guard to ensure that we don't include it multiple times.
  | #ifndef _COOLBEARS_H_
  | /* checkInput: given the result of scanf check if it 
  |  * 0 elements read or EOF. If so exit(1) with a warning.
  |  *
  |  */
  | #define _COOLBEARS_H_
  | struct coolbear_t; // Forward declaration -- I am not sharing details!
  | typedef struct coolbear_t * CoolBear; // Struct point as type
  | 
  | CoolBear createCoolBear(char * name, float temperature); // a prototype!
  | void     freeCoolBear(CoolBear coolBear); // a prototype!
  | char *   getNameCoolBear(CoolBear coolbear); // a prototype!
  | float    getTemperatureCoolBear(CoolBear coolbear); // a prototype!
  | 
  | #endif
  `----

  <file:./coolbears-driver.c>

  ,----
  | #include "coolbears.h"
  | #include <stdio.h>
  | 
  | int main() {
  |   CoolBear ziggy = createCoolBear("Ziggy",-23.0 /* C */);
  |   CoolBear kevin = createCoolBear("Kevin",-32.0 /* C */);
  |   CoolBear coolest = (getTemperatureCoolBear(ziggy) < 
  |                       getTemperatureCoolBear(kevin))? ziggy : kevin;
  |   printf("The coolest bear is %s\n", getNameCoolBear( coolest ));
  |   // // we actually don't know about name so we can't reference it below
  |   // printf("The coolest bear is %s\n", coolest->name );
  |   freeCoolBear(ziggy);
  |   freeCoolBear(kevin);
  | }
  `----

  Compile it. -c the coolbears.c to make coolbears.o and then compile
  coolbears-driver.c

  coolbears-driver.c has no clue how to access

  ,----
  | # build coolbears.o
  | gcc  -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 \
  |        -c coolbears.c
  | # build coolbears-driver and link it to coolbears.o
  | gcc  -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 \
  |        -o coolbears-driver coolbears-driver.c \
  |        coolbears.o 
  | ./coolbears-driver
  `----

  ,----
  | The coolest bear is Kevin
  `----


  If we access coolest->name we get:

  ,----
  | coolbears-driver.c: In function ‘main’:
  | coolbears-driver.c:11:62: error: dereferencing pointer to incomplete type ‘struct coolbear_t’
  |    printf("The coolest bear is %s\n", getNameCoolBear( coolest->name ));
  `----


1.5.5 What is the preprocessor doing?
-------------------------------------

  Let's use the -E flag to see what checkinput.c becomes

  This output contains glibc headers for stdio.h and stdlib.h these
  should be under the GPLV3 (c) the Glibc project and GNU project.

  If you want more preprocessor options checkout:

  <https://gcc.gnu.org/onlinedocs/gcc-5.2.0/gcc/Preprocessor-Options.html>

  ,----
  | # build checkinput.o
  | gcc -E -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 \
  |        checkinput.c > checkinput-preprocessor.c
  `----

  ,----

  `----

  It produces this file:

  <file:checkinput-preprocessor.c>


  ,----
  | # 1 "checkinput.c"
  | # 1 "/home/hindle1/projects/CMPUT201W20/2020-01/CMPUT201W20B2-public/week10//"
  | # 1 "<built-in>"
  | #define __STDC__ 1
  | #define __STDC_VERSION__ 199901L
  | #define __STDC_HOSTED__ 1
  | #define __GNUC__ 7
  | #define __GNUC_MINOR__ 5
  | #define __GNUC_PATCHLEVEL__ 0
  | 
  | // lots of definitions
  | 
  | # 1 "/usr/include/stdio.h" 1 3 4
  | # 24 "/usr/include/stdio.h" 3 4
  | #define _STDIO_H 1
  | 
  | // Start of STDIO_H
  | 
  | // ...
  | 
  | extern int printf (const char *__restrict __format, ...);
  | 
  | extern int sprintf (char *__restrict __s,
  |       const char *__restrict __format, ...) __attribute__ ((__nothrow__));
  | 
  | 
  | // LOTS OF STDIO.H
  | 
  | 
  | // LOTS OF STDLIB.H
  | 
  | # 1016 "/usr/include/stdlib.h" 3 4
  | # 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
  | # 1017 "/usr/include/stdlib.h" 2 3 4
  | # 1026 "/usr/include/stdlib.h" 3 4
  | 
  | # 5 "checkinput.c" 2
  | 
  | 
  | 
  | 
  | 
  | # 9 "checkinput.c"
  | void checkInput(int err) {
  |   if (!err || err == 
  | # 10 "checkinput.c" 3 4
  |                     (-1)
  | # 10 "checkinput.c"
  |                        ) {
  |     printf("\nInvalid input!\n");
  |     exit(1);
  |   }
  | }
  | return 0;
  | }
  `----

  <file:checkinput-preprocessor.c>


1.5.6 Parameterized Macros
--------------------------

  As we just demonstrated Macros generate code. So we can make compile
  functions that generate code. These functions run at compile time and
  generate code that is compiled by C.

  ,----
  | #include <stdio.h>
  | #include <stdlib.h>
  | #include <stdbool.h>
  | 
  | // RELU is a rectified linear unit. These are popular in convolutional neural networks
  | // they are 0 for 0 and negative numbers and they are the identity for positive numbers.
  | // RELU(-100) = RELU(-1) = 0 && RELU(1) = 1 && RELU(100) = 100
  | #define RELU(x)  (( x < 0 )?0:x)
  | 
  | int main() {
  |     // ints
  |     for (int i = -10; i < 10; i++) {
  |         printf("RELU(%d)=%d\n", i, RELU(i));
  |     }
  |     puts("\n");
  |     // more in the range of neural networks
  |     for (double i = -1; i < 1; i+=0.1) {
  |         printf("RELU(%f)=%f\n", i, RELU(i));
  |     }
  |     puts("\n");
  | }
  `----

  ,----
  | RELU(-10)=0
  | RELU(-9)=0
  | RELU(-8)=0
  | RELU(-7)=0
  | RELU(-6)=0
  | RELU(-5)=0
  | RELU(-4)=0
  | RELU(-3)=0
  | RELU(-2)=0
  | RELU(-1)=0
  | RELU(0)=0
  | RELU(1)=1
  | RELU(2)=2
  | RELU(3)=3
  | RELU(4)=4
  | RELU(5)=5
  | RELU(6)=6
  | RELU(7)=7
  | RELU(8)=8
  | RELU(9)=9
  | 
  | 
  | RELU(-1.000000)=0.000000
  | RELU(-0.900000)=0.000000
  | RELU(-0.800000)=0.000000
  | RELU(-0.700000)=0.000000
  | RELU(-0.600000)=0.000000
  | RELU(-0.500000)=0.000000
  | RELU(-0.400000)=0.000000
  | RELU(-0.300000)=0.000000
  | RELU(-0.200000)=0.000000
  | RELU(-0.100000)=0.000000
  | RELU(-0.000000)=0.000000
  | RELU(0.100000)=0.100000
  | RELU(0.200000)=0.200000
  | RELU(0.300000)=0.300000
  | RELU(0.400000)=0.400000
  | RELU(0.500000)=0.500000
  | RELU(0.600000)=0.600000
  | RELU(0.700000)=0.700000
  | RELU(0.800000)=0.800000
  | RELU(0.900000)=0.900000
  | RELU(1.000000)=1.000000
  `----

  ,----
  | gcc -E -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 \
  |        relu.c > \
  |        relu-expanded.c
  `----

  <file:relu-expanded.c>

  ,----
  | #define RELU(x) (( x < 0 )?0:x)
  | 
  | 
  | # 10 "relu.c"
  | int main() {
  | 
  |     for (int i = -10; i < 10; i++) {
  |         printf("RELU(%d)=%d\n", i, (( i < 0 )?0:i));
  |     }
  |     puts("\n");
  | 
  |     for (double i = -1; i < 1; i+=0.1) {
  |         printf("RELU(%f)=%f\n", i, (( i < 0 )?0:i));
  |     }
  |     puts("\n");
  | }
  `----

  That's interesting, but be aware that x is not a value. It is a set of
  tokens.

  ,----
  | #include <math.h>
  | #include <stdio.h>
  | #include <stdlib.h>
  | #include <stdbool.h>
  | 
  | // RELU is a rectified linear unit. These are popular in convolutional neural networks
  | // they are 0 for 0 and negative numbers and they are the identity for positive numbers.
  | // RELU(-100) = RELU(-1) = 0 && RELU(1) = 1 && RELU(100) = 100
  | #define RELU(x)  (( x < 0 )?0:x)
  | 
  | int main() {
  |     double x = 2.0;
  |     double y = 127.1;
  |     // How many times will pow(x,y) run?
  |     printf("%f\n", RELU(pow(x,y)));
  | 
  | }
  `----

  ,----
  | 1.8235280531744908e+38
  `----


  ,----
  | gcc -E -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 \
  |        relu2.c > \
  |        relu2-expanded.c
  `----

  <file:relu2-expanded.c>

  ,----
  | #define RELU(x) (( x < 0 )?0:x)
  | 
  | 
  | # 11 "relu2.c"
  | int main() {
  |     double x = 2.0;
  |     double y = 127.1;
  |     // Uh oh how many pows?
  |     printf("%f\n", (( pow(x,y) < 0 )?0:pow(x,y)));
  | 
  | }
  `----


* 1.5.6.1 Easy bugs!

  So why doesn't this work?

  <file:./checkinputmacro.c>

  ,----
  | #include <stdio.h>
  | #include <stdlib.h>
  | #include <stdbool.h>
  | 
  | // if checkinput is true then you have an error
  | #define CHECKINPUT(scanfReturn)  ( scanfReturn == EOF || !scanfReturn )
  | 
  | int main() {
  |     int myInt = 0;
  |     if (CHECKINPUT(scanf("%d", &myInt))) {
  |         printf("Invalid input!\n");
  |         exit(1);
  |     }
  |     printf("My int: %d\n", myInt);
  | }
  `----

  ,----
  | gcc  -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 \
  |        -o checkinputmacro checkinputmacro.c
  | echo 6  | ./checkinputmacro
  | echo 6 7 | ./checkinputmacro
  | echo 6 X | ./checkinputmacro || echo exit was $?
  | echo X 6 | ./checkinputmacro || echo exit was $?
  | echo | ./checkinputmacro || echo exit was $?
  `----

  ,----
  | My int: 6
  | My int: 7
  | Invalid input!
  | exit was 1
  | Invalid input!
  | exit was 1
  | Invalid input!
  | exit was 1
  `----


  ,----
  | gcc -E -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 \
  |        checkinputmacro.c > \
  |        checkinputmacro-expanded.c
  `----

  <file:checkinputmacro-expanded.c>

  Let's look at the output:

  ,----
  | #define CHECKINPUT(scanfReturn) ( scanfReturn == false || scanfReturn == EOF)
  | 
  | # 8 "checkinputmacro.c"
  | int main() {
  |     int myInt = 0;
  |     if (( scanf("%d", &myInt) == 
  | # 10 "checkinputmacro.c" 3 4
  |        0 
  | # 10 "checkinputmacro.c"
  |        || scanf("%d", &myInt) == 
  | # 10 "checkinputmacro.c" 3 4
  |        (-1)
  | # 10 "checkinputmacro.c"
  |        )) {
  |         printf("Invalid input!\n");
  |         exit(1);
  |     }
  |     printf("My int: %d\n", myInt);
  | }
  `----

  I'll clear it up for you

  ,----
  | #define CHECKINPUT(scanfReturn) ( scanfReturn == false || scanfReturn == EOF)
  | 
  | int main() {
  |     int myInt = 0;
  |     if (( scanf("%d", &myInt) ==  0 || scanf("%d", &myInt) == (-1))) {
  |         printf("Invalid input!\n");
  |         exit(1);
  |     }
  |     printf("My int: %d\n", myInt);
  | }
  `----

  See? 2 scanfs instead of 1. Great. So macros will copy your tokens,
  not your values. They are meta-functions and not real functions.

  How do we fix? We assign the result once!

  ,----
  | #include <stdio.h>
  | #include <stdlib.h>
  | #include <stdbool.h>
  | 
  | // if checkinput is true then you have an error
  | // horrible and bad style don't do this at home!
  | static int __ret;
  | #define CHECKINPUT(scanfReturn)  (__ret = scanfReturn, (__ret== EOF || !__ret ))
  | 
  | int main() {
  |     int myInt = 0;
  |     if (CHECKINPUT(scanf("%d", &myInt))) {
  |         printf("Invalid input!\n");
  |         exit(1);
  |     }
  |     printf("My int: %d\n", myInt);
  | }
  `----

  ,----
  | gcc  -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 \
  |        -o checkinputmacro-fixed checkinputmacro-fixed.c
  | echo   | ./checkinputmacro-fixed
  | echo X | ./checkinputmacro-fixed
  | echo 6 | ./checkinputmacro-fixed
  `----

  ,----
  | Invalid input!
  | Invalid input!
  | My int: 6
  `----


  ,----
  | gcc -E -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 \
  |        checkinputmacro-fixed.c > \
  |        checkinputmacro-fixed-expanded.c
  `----

  <file:checkinputmacro-fixed-expanded.c>

  ,----
  | # 7 "checkinputmacro-fixed.c"
  | static int __ret;
  | #define CHECKINPUT(scanfReturn) (__ret = scanfReturn, (__ret== EOF || !__ret ))
  | 
  | int main() {
  |     int myInt = 0;
  |     if ((__ret = scanf("%d", &myInt), (__ret== 
  | # 12 "checkinputmacro-fixed.c" 3 4
  |        (-1) 
  | # 12 "checkinputmacro-fixed.c"
  |        || !__ret ))) {
  |         printf("Invalid input!\n");
  |         exit(1);
  |     }
  |     printf("My int: %d\n", myInt);
  | }
  `----


1.6 Makefiles
~~~~~~~~~~~~~

  I am sick to death of all these shell scripts!

  Look at the assignments 1 shell script per question and they mostly
  say the same things.

  Programmers uses build systems to manage compiling and linking large
  programs. They often do not use shell scripts or batch files directly.

  Makefiles allow you to use make to build your program. Make is
  declarative, dependency based build system.

  Makefiles are full of rules for building files.

  ,----
  | file-you-want-to-build: dependency1.c dependency2.o dependency3.o
  |         gcc -o file-you-want-to-build dependency1.c dependency2.o dependency3.o
  `----

  ^^^ There is a tab character before the gcc

  To build file-you-want-to-build you type:

  make file-you-want-to-build

  make


1.6.1 Basic Makefile
--------------------

  We're going to use the coolbears source code from before.

  Instead of this:

  ,----
  | # build coolbears.o
  | gcc  -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 \
  |        -c coolbears.c
  | # build coolbears-driver and link it to coolbears.o
  | gcc  -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 \
  |        -o coolbears-driver coolbears-driver.c \
  |        coolbears.o 
  | ./coolbears-driver
  `----

  ,----
  | The coolest bear is Kevin
  `----


  ,----
  | # this just runs a command but ensures it is built
  | # first directive runs by default
  | # usually you should but put the top level build directive here
  | run: coolbears-driver
  |         ./coolbears-driver # just a shell command
  | 
  | # build an object file
  | coolbears.o: coolbears.c
  |         gcc  -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 \
  |         -c coolbears.c
  | 
  | # build an executable
  | coolbears-driver: coolbears-driver.c coolbears.o
  |         gcc  -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 \
  |         -o coolbears-driver coolbears-driver.c \
  |         coolbears.o 
  | 
  | # clean is idiomatic for remove object files and executables
  | clean: 
  |         rm -f coolbears.o coolbears-driver
  | 
  `----

  let's run it. Normally make just runs Makefile. But if you have your
  own makefiles you should use the -f option with make.

  ,----
  | make -f Makefile.coolbears clean
  | make -f Makefile.coolbears coolbears.o
  | make -f Makefile.coolbears coolbears-driver
  | make -f Makefile.coolbears run
  `----

  ,----
  | rm coolbears.o coolbears-driver || echo nothing to delete
  | gcc  -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 \
  |         -c coolbears.c
  | gcc  -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 \
  | -o coolbears-driver coolbears-driver.c \
  | coolbears.o 
  | ./coolbears-driver # just a shell command
  | The coolest bear is Kevin
  `----


  Or we could just do this:
  ,----
  | # I am making clean just to clear out the executables and object files
  | make -f Makefile.coolbears clean
  | make -f Makefile.coolbears run
  `----

  ,----
  | rm coolbears.o coolbears-driver || echo nothing to delete
  | gcc  -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 \
  |         -c coolbears.c
  | gcc  -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 \
  | -o coolbears-driver coolbears-driver.c \
  | coolbears.o 
  | ./coolbears-driver # just a shell command
  | The coolest bear is Kevin
  `----


  OR we could do this!

  ,----
  | # I am making clean just to clear out the executables and object files
  | make -f Makefile.coolbears clean
  | make -f Makefile.coolbears
  `----

  ,----
  | rm coolbears.o coolbears-driver || echo nothing to delete
  | gcc  -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 \
  |         -c coolbears.c
  | gcc  -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 \
  | -o coolbears-driver coolbears-driver.c \
  | coolbears.o 
  | ./coolbears-driver # just a shell command
  | The coolest bear is Kevin
  `----


  Ha it does the same thing!


  What if I run make again?

  ,----
  | # I am making clean just to clear out the executables and object files
  | make -f Makefile.coolbears
  `----

  ,----
  | ./coolbears-driver # just a shell command
  | The coolest bear is Kevin
  `----


  It just uses the old object files.

  ,----
  | # if I remove the executable it'll rebuild only the executable
  | rm coolbears-driver
  | make -f Makefile.coolbears
  `----

  ,----
  | gcc  -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 \
  | -o coolbears-driver coolbears-driver.c \
  | coolbears.o 
  | ./coolbears-driver # just a shell command
  | The coolest bear is Kevin
  `----


  ,----
  | # if I remove the object files it'll build the whole thing
  | rm *.o
  | make -f Makefile.coolbears
  `----

  ,----
  | gcc  -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 \
  |         -c coolbears.c
  | gcc  -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 \
  | -o coolbears-driver coolbears-driver.c \
  | coolbears.o 
  | ./coolbears-driver # just a shell command
  | The coolest bear is Kevin
  `----



  Personally I would've preferred if assignments were done this way.


1.6.2 DRY Makefile
------------------

  DRY means DON'T REPEAT YOURSELF.

  Let's make a makefile that is easier to use and less prone to errors
  by repeating text.

  Instead of this:

  ,----
  | # this just runs a command but ensures it is built
  | run: coolbears-driver
  |         ./coolbears-driver # just a shell command
  | 
  | # build an object file
  | coolbears.o: coolbears.c
  |         gcc  -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 \
  |         -c coolbears.c
  | 
  | # build an executable
  | coolbears-driver: coolbears-driver.c coolbears.o
  |         gcc  -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 \
  |         -o coolbears-driver coolbears-driver.c \
  |         coolbears.o 
  | 
  | # clean is idiomatic for remove object files and executables
  | clean: 
  |         rm -f coolbears.o coolbears-driver || echo nothing to delete
  | 

  `----

  We're going to automate our Makefile a little more with variables.

  You can make a variable in a makefile by going VARNAME=some string of
     stuff LISTNAME=item1 item2 item3 item4 SCALARNAME="SCALAR VALUE"

  ,----
  | # common arguments for GCC
  | CFLAGS= -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3
  | # Common compiler
  | CC=gcc
  | # you might call these OBJECTS instead
  | BUILDABLES=coolbears.o coolbears-driver
  | 
  | # this just runs a command but ensures it is built
  | run: coolbears-driver
  |         ./coolbears-driver # just a shell command
  | 
  | coolbears.o: coolbears.c
  |         $(CC) $(CFLAGS) \
  |         -c coolbears.c
  | 
  | # build an executable
  | coolbears-driver: coolbears-driver.c coolbears.o
  |         $(CC) $(CFLAGS) \
  |         -o coolbears-driver coolbears-driver.c \
  |         coolbears.o 
  | 
  | # clean is idiomatic for remove object files and executables
  | clean: 
  |         rm -f $(BUILDABLES)
  `----

  let's run it. Normally make just runs Makefile. But if you have your
  own makefiles you should use the -f option with make.

  ,----
  | make -f Makefile.coolbears.dry run
  `----

  ,----
  | ./coolbears-driver # just a shell command
  | The coolest bear is Kevin
  `----


1.6.3 Idiomatic GCC Makefile
----------------------------

  Make knows a lot about C. Make comes with default rules that will call
  your compiler for you as long as CFLAGS and CC are properly set!

  This means it knows how to make an executable.

  It knows how to make an object file. It just needs to know the
  dependencies.

  You can reuse this makefile as well!

  ,----
  | # common arguments for GCC
  | CFLAGS= -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3
  | # Do you need your math lib? Put it here this is the linking libraries
  | # variable
  | LDLIBS=-lm
  | # Common compiler
  | CC=gcc
  | OBJECTS=coolbears.o coolbears-driver.o
  | EXEC=coolbears-driver
  | BUILDABLES=$(OBJECTS) $(EXEC)
  | 
  | # this just runs a command but ensures it is built
  | run: $(EXEC)
  |         ./$(EXEC) # just a shell command
  | 
  | # We don't even need to specify how to make coolbears.o
  | # try commenting and uncommenting this line
  | # coolbears.o: coolbears.c
  | 
  | # build an executable
  | # coolbears-driver: coolbears-driver.c coolbears.o
  | 
  | # # this would work too
  | # coolbears-driver: coolbears-driver.o coolbears.o
  | 
  | $(EXEC): $(OBJECTS)
  | 
  | 
  | # clean is idiomatic for remove object files and executables
  | clean: 
  |         rm -f $(BUILDABLES)
  `----

  let's run it. Normally make just runs Makefile. But if you have your
  own makefiles you should use the -f option with make.

  ,----
  | make -f Makefile.coolbears.idiomatic clean
  | make -f Makefile.coolbears.idiomatic run
  `----

  ,----
  | rm coolbears.o coolbears-driver.o coolbears-driver || echo nothing to delete
  | nothing to delete
  | gcc -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3   -c -o coolbears-driver.o coolbears-driver.c
  | gcc -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3   -c -o coolbears.o coolbears.c
  | gcc   coolbears-driver.o coolbears.o  -lm -o coolbears-driver
  | ./coolbears-driver # just a shell command
  | The coolest bear is Kevin
  `----


1.6.4 Special Macro Vars
------------------------

  - $@ the target file name

  - $< the first dependency

  - $? new dependencies that have changed

  - $^ all dependencies

  - $* target suffix

  ,----
  | OBJECTS=example.txt 1.txt 2.txt 3.txt
  | 
  | run: example.txt
  |         echo $@ $< $*
  |         cat example.txt
  | 
  | example.txt: 1.txt 2.txt 3.txt
  |         echo First Dependency $<
  |         echo Target $@
  |         echo New Deps $?
  |         echo All Deps $^
  |         echo target suffix $*
  |         cat $^ > example.txt
  | 
  | 1.txt:
  |         echo $@ > $@
  | 2.txt:
  |         echo $@ > $@
  | 3.txt:
  |         echo $@ > $@
  | 
  | clean:
  |         rm $(OBJECTS) || echo all good
  `----

  ,----
  | make -f Makefile.macros clean
  | make -f Makefile.macros
  `----

  ,----
  | rm example.txt 1.txt 2.txt 3.txt || echo all good
  | echo 1.txt > 1.txt
  | echo 2.txt > 2.txt
  | echo 3.txt > 3.txt
  | echo First Dependency 1.txt
  | First Dependency 1.txt
  | echo Target example.txt
  | Target example.txt
  | echo New Deps 1.txt 2.txt 3.txt
  | New Deps 1.txt 2.txt 3.txt
  | echo All Deps 1.txt 2.txt 3.txt
  | All Deps 1.txt 2.txt 3.txt
  | echo target suffix 
  | target suffix
  | cat 1.txt 2.txt 3.txt > example.txt
  | echo run example.txt 
  | run example.txt
  | cat example.txt
  | 1.txt
  | 2.txt
  | 3.txt
  `----


* 1.6.4.1 Implicit Rules

  Here's an example of implicit rules. Of how we convert 1 file to
  another implicitly much like how Make hands C compilation.

  ,----
  | ############################### Implicit rules ###############################
  | 
  | # Convert a .tex file to a .pdf
  | %.pdf: %.tex $(ALLDEPS)
  |         latexmk -pdf $(LATEXMK_OPTS) $*
  | 
  | # Convert SVGs to PDFs
  | # Requires Inkscape
  | %.pdf: %.svg
  |         inkscape -b white -t -T --export-ignore-filters --export-pdfs=$@ $<
  | 
  | # Convert EPSs to PDFs
  | # epstopdf(1) is often bundled with TeX distributions
  | %.pdf: %.eps
  |         epstopdf $<
  | 
  | # Automatically crops the margins of a PDF.
  | %-crop.pdf: %.pdf
  |         pdfcrop $<
  `----


1.6.5 Can we lint and valgrind with our makefiles?
--------------------------------------------------

  ,----
  | # common arguments for GCC
  | CFLAGS= -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3
  | # Common compiler
  | CC=gcc
  | # you might call these OBJECTS instead
  | BUILDABLES=coolbears.o coolbears-driver
  | # clangtidy checks
  | CHECKS=--checks=*,-cert-err34-c,-cert-msc30-c,-cert-msc50-cpp
  | # oclint checks
  | LINTR=--disable-rule=UselessParentheses
  | CLANGTIDY=clang-tidy
  | OCLINT=oclint
  | .PHONY: run clean lint-coolbears-driver
  | 
  | # this just runs a command but ensures it is built
  | run: coolbears-driver
  |         ./coolbears-driver # just a shell command
  | 
  | coolbears.o: coolbears.c coolbears.h
  |         $(CC) $(CFLAGS) \
  |         -c coolbears.c
  | 
  | coolbears-driver.o: coolbears-driver.c coolbears.c
  |         $(CC) $(CFLAGS) \
  |         -c coolbears.c
  | 
  | # build an executable
  | coolbears-driver: coolbears-driver.o coolbears.o
  |         $(CC) $(CFLAGS) \
  |         -o coolbears-driver coolbears-driver.o \
  |         coolbears.o 
  | 
  | # clean is idiomatic for remove object files and executables
  | clean: 
  |         rm -f $(BUILDABLES) 
  | 
  | lint-coolbears-driver: coolbears-driver.c
  |         $(CLANGTIDY) $(CHECKS) \
  |                 $< -- \
  |                 $(CFLAGS) -c $^ $(LDFLAGS)
  |         $(OCLINT) $(LINTR) $< \
  |                 -- $(CFLAGS) -c $< $(LDFLAGS)
  `----

  ,----
  | make -f Makefile.coolbears.lint lint-coolbears-driver
  `----

  ,----
  | clang-tidy --checks=*,-cert-err34-c,-cert-msc30-c,-cert-msc50-cpp \
  | 	coolbears-driver.c -- \
  | 	-std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -c coolbears-driver.c 
  | /home/hindle1/projects/CMPUT201W20/2020-01/CMPUT201W20B2-public/week10/coolbears-driver.c:5:43: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions]
  |   CoolBear ziggy = createCoolBear("Ziggy",-23.0 /* C */);
  |                                           ^
  | /home/hindle1/projects/CMPUT201W20/2020-01/CMPUT201W20B2-public/week10/coolbears-driver.c:5:44: warning: 23.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  |   CoolBear ziggy = createCoolBear("Ziggy",-23.0 /* C */);
  |                                            ^
  | /home/hindle1/projects/CMPUT201W20/2020-01/CMPUT201W20B2-public/week10/coolbears-driver.c:6:43: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions]
  |   CoolBear kevin = createCoolBear("Kevin",-32.0 /* C */);
  |                                           ^
  | /home/hindle1/projects/CMPUT201W20/2020-01/CMPUT201W20B2-public/week10/coolbears-driver.c:6:44: warning: 32.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  |   CoolBear kevin = createCoolBear("Kevin",-32.0 /* C */);
  |                                            ^
  | oclint --disable-rule=UselessParentheses coolbears-driver.c \
  | 	-- -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -c coolbears-driver.c 
  | 
  | 
  | OCLint Report
  | 
  | Summary: TotalFiles=1 FilesWithViolations=0 P1=0 P2=0 P3=0 
  | 
  | 
  | [OCLint (http://oclint.org) v0.15]
  `----

  We can go further:

  ,----
  | # common arguments for GCC
  | CFLAGS= -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3
  | # Common compiler
  | CC=gcc
  | # you might call these OBJECTS instead
  | BUILDABLES=coolbears.o coolbears-driver
  | # clangtidy checks
  | CHECKS=--checks=*,-cert-err34-c,-cert-msc30-c,-cert-msc50-cpp
  | # oclint checks
  | LINTR=--disable-rule=UselessParentheses
  | CLANGTIDY=clang-tidy
  | OCLINT=oclint
  | HEADERS=coolbears.h
  | OBJECTS=coolbears.o coolbears-driver.o
  | EXECUTABLE=coolbears-driver
  | 
  | .PHONY: lint-% run clean valgrind
  | 
  | # this just runs a command but ensures it is built
  | run: $(EXECUTABLE)
  |         ./$(EXECUTABLE)
  | 
  | %.o: %.c $(HEADERS)
  |         $(CC) $(CFLAGS) -c $<
  | #	$(CLANGTIDY) $(CHECKS) \
  | #		$< -- \
  | #		$(CFLAGS) -c $< $(LDFLAGS)
  | #	$(OCLINT) $(LINTR) $< \
  | #		-- $(CFLAGS) -c $< $(LDFLAGS)
  | 
  | 
  | $(EXECUTABLE): $(OBJECTS)
  |         $(CC) $(CFLAGS) -o $@ $^
  | 
  | # clean is idiomatic for remove object files and executables
  | clean: 
  |         rm -f $(EXECUTABLE) $(OBJECTS) 
  | 
  | lint-%: %.c
  |         $(CLANGTIDY) $(CHECKS) \
  |                 $< -- \
  |                 $(CFLAGS) -c $< $(LDFLAGS)
  |         $(OCLINT) $(LINTR) $< \
  |                 -- $(CFLAGS) -c $< $(LDFLAGS)
  | 
  | # Lookie here how these 2 valgrinds are very similar
  | valgrind-%: %
  |         valgrind --leak-check=full --track-origins=yes ./$< 2>&1
  | 
  | valgrind: $(EXECUTABLE)
  |         valgrind --leak-check=full --track-origins=yes ./$< 2>&1
  | 
  `----

  ,----
  | make -f Makefile.coolbears.lint.dry lint-coolbears-driver
  | make -f Makefile.coolbears.lint.dry lint-coolbears
  | make -f Makefile.coolbears.lint.dry valgrind-coolbears-driver
  `----

  ,----
  | clang-tidy --checks=*,-cert-err34-c,-cert-msc30-c,-cert-msc50-cpp \
  | 	coolbears-driver.c -- \
  | 	-std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -c coolbears-driver.c 
  | /home/hindle1/projects/CMPUT201W20/2020-01/CMPUT201W20B2-public/week10/coolbears-driver.c:5:43: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions]
  |   CoolBear ziggy = createCoolBear("Ziggy",-23.0 /* C */);
  |                                           ^
  | /home/hindle1/projects/CMPUT201W20/2020-01/CMPUT201W20B2-public/week10/coolbears-driver.c:5:44: warning: 23.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  |   CoolBear ziggy = createCoolBear("Ziggy",-23.0 /* C */);
  |                                            ^
  | /home/hindle1/projects/CMPUT201W20/2020-01/CMPUT201W20B2-public/week10/coolbears-driver.c:6:43: warning: narrowing conversion from 'double' to 'float' [bugprone-narrowing-conversions]
  |   CoolBear kevin = createCoolBear("Kevin",-32.0 /* C */);
  |                                           ^
  | /home/hindle1/projects/CMPUT201W20/2020-01/CMPUT201W20B2-public/week10/coolbears-driver.c:6:44: warning: 32.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]
  |   CoolBear kevin = createCoolBear("Kevin",-32.0 /* C */);
  |                                            ^
  | oclint --disable-rule=UselessParentheses coolbears-driver.c \
  | 	-- -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -c coolbears-driver.c 
  | 
  | 
  | OCLint Report
  | 
  | Summary: TotalFiles=1 FilesWithViolations=0 P1=0 P2=0 P3=0 
  | 
  | 
  | [OCLint (http://oclint.org) v0.15]
  | clang-tidy --checks=*,-cert-err34-c,-cert-msc30-c,-cert-msc50-cpp \
  | 	coolbears.c -- \
  | 	-std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -c coolbears.c 
  | oclint --disable-rule=UselessParentheses coolbears.c \
  | 	-- -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -c coolbears.c 
  | 
  | 
  | OCLint Report
  | 
  | Summary: TotalFiles=1 FilesWithViolations=0 P1=0 P2=0 P3=0 
  | 
  | 
  | [OCLint (http://oclint.org) v0.15]
  | valgrind --leak-check=full --track-origins=yes ./coolbears-driver 2>&1
  | ==17934== Memcheck, a memory error detector
  | ==17934== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
  | ==17934== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
  | ==17934== Command: ./coolbears-driver
  | ==17934== 
  | The coolest bear is Kevin
  | ==17934== 
  | ==17934== HEAP SUMMARY:
  | ==17934==     in use at exit: 0 bytes in 0 blocks
  | ==17934==   total heap usage: 5 allocs, 5 frees, 4,140 bytes allocated
  | ==17934== 
  | ==17934== All heap blocks were freed -- no leaks are possible
  | ==17934== 
  | ==17934== For counts of detected and suppressed errors, rerun with: -v
  | ==17934== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
  `----


1.6.6 .PHONY
------------

  Hazel says:

  It is also often useful to have a rule that removes the compiled code
  so that you can easily compile your program from scratch. This is
  useful when you change your Makefile. We can add a phony rule named
  clean so that when we run “make clean” on the command line it removes
  all the compiler outputs: s-expr, s-expr.o, and main.o:
  ,----
  | .PHONY: clean
  | clean:
  |        rm -f s-expr s-expr.o main.o
  `----
  This tells make:

  “clean” is not an actual file that will be made, instead we should run
  the recipe for “clean” everytime we make “clean”.

  “clean” doesn’t have any input files that will change the output
  (there is nothing after the colon :)

  When we make “clean” we will remove the files s-expr, s-expr.o, and
  main.o.


1.6.7 Makefile help
-------------------

  The GNU Manual is pretty good

  <https://www.gnu.org/software/make/manual/html_node/Introduction.html>

  Hazel's write up is very good (UAlberta ONLY)

  <https://docs.google.com/document/d/1k8bAErdg6ju8reniMUhnkkjCtwUHWCM9mn59iHnI0rc/>


1.6.8 Useful Tool! asan and usan
--------------------------------

  Google made some static analysis tools to detect issues!

  (From chefmax of Google (2020)
  <https://github.com/google/sanitizers/wiki/AddressSanitizer> )

  Address sanitizer detects:

  - Use after free (dangling pointer dereference)
  - Heap buffer overflow
  - Stack buffer overflow
  - Global buffer overflow
  - Use after return
  - Use after scope
  - Initialization order bugs
  - Memory leaks

  I've been telling y'all to use it in the discussion forum. It's like
  valgrind but it does different things and has nice output.

  How do you use it?

  With clang or gcc add the argument

  -fsanitize=address fsanitize=undefined

  For address sanitization or undefined santitization.

  If you want more options check out
  <https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html>


* 1.6.8.1 ./array_oob.c

  <file:./array_oob.c>

  Sanitize ./array_oob.c with address!
  ,----
  | gcc -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -fsanitize=address -o array_oob ./array_oob.c
  | echo 33 | ./array_oob 2>&1 || echo it crashed
  `----

  ,----
  | How big?
  | 32768
  | 32769
  `----


  And now with undefined!
  ,----
  | gcc -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -fsanitize=undefined -o array_oob ./array_oob.c
  | echo 33 | ./array_oob 2>&1 || echo it crashed
  `----

  ,----
  | array_oob.c:27:25: runtime error: index 100 out of bounds for type 'int [*]'
  | array_oob.c:28:16: runtime error: index 100 out of bounds for type 'int [*]'
  | array_oob.c:29:25: runtime error: index 100 out of bounds for type 'int [*]'
  | How big?
  | 228404760
  | 228404761
  `----


* 1.6.8.2 ./array_uninit.c

  <file:./array_uninit.c>

  Sanitize ./array_uninit.c with address!
  ,----
  | gcc -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -fsanitize=address -o array_uninit ./array_uninit.c
  | echo 33 | ./array_uninit 2>&1 || echo it crashed
  `----

  ,----
  | How big?
  | 8
  | 0
  | -1161344461
  | 32518
  | 1
  | 0
  | -1139022064
  | 32518
  | 1
  | 0
  | 8
  | 0
  | -1157802144
  | 32518
  | -18317152
  | 22068
  | -1157819744
  | 32518
  | 0
  | 0
  | 0
  | 0
  | -1161389425
  | 32518
  | 0
  | 0
  | -1733836896
  | 32765
  | -1733836752
  | 32765
  | -1733836800
  | 32765
  | -1290471436
  `----

  And now with undefined!
  ,----
  | gcc -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -fsanitize=undefined -o array_uninit ./array_uninit.c
  | echo 33 | ./array_uninit 2>&1 || echo it crashed
  `----

  ,----
  | How big?
  | 8
  | 0
  | -1481213389
  | 32667
  | 0
  | 0
  | 0
  | 0
  | 0
  | 0
  | 8
  | 0
  | -1477671072
  | 32667
  | 1516891477
  | 21955
  | -1477688672
  | 32667
  | 27792816
  | 32767
  | 0
  | 0
  | -1481258353
  | 32667
  | 0
  | 0
  | 0
  | 0
  | 27792928
  | 32767
  | 1516890624
  | 21955
  | 0
  `----


* 1.6.8.3 ./bad_realloc.c

  <file:./bad_realloc.c>

  Sanitize ./bad_realloc.c with address!
  ,----
  | gcc -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -fsanitize=address -o bad_realloc ./bad_realloc.c
  | echo 33 | ./bad_realloc 2>&1 || echo it crashed
  `----

  ,----
  | ASAN:DEADLYSIGNAL
  | =================================================================
  | ==17981==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55843be750f5 bp 0x7ffe82ab4760 sp 0x7ffe82ab4730 T0)
  | ==17981==The signal is caused by a READ memory access.
  | ==17981==Hint: address points to the zero page.
  |     #0 0x55843be750f4 in push bad_realloc.c:54
  |     #1 0x55843be754b2 in push_input_lines bad_realloc.c:91
  |     #2 0x55843be75616 in main bad_realloc.c:111
  |     #3 0x7efe33825b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)
  |     #4 0x55843be74c99 in _start (/home/hindle1/projects/CMPUT201W20/2020-01/CMPUT201W20B2-public/week10/bad_realloc+0xc99)
  | 
  | AddressSanitizer can not provide additional info.
  | SUMMARY: AddressSanitizer: SEGV bad_realloc.c:54 in push
  | ==17981==ABORTING
  | it crashed
  `----

  And now with undefined!
  ,----
  | gcc -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -fsanitize=undefined -o bad_realloc ./bad_realloc.c
  | echo 33 | ./bad_realloc 2>&1 || echo it crashed
  `----

  ,----
  | it crashed
  `----


* 1.6.8.4 ./bad_str.c

  <file:./bad_str.c>

  Sanitize ./bad_str.c with address!
  ,----
  | gcc -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -fsanitize=address -o bad_str ./bad_str.c
  | echo 33 | ./bad_str 2>&1 || echo it crashed
  `----

  ,----
  | 
  | =================================================================
  | ==18000==ERROR: LeakSanitizer: detected memory leaks
  | 
  | Direct leak of 5 byte(s) in 1 object(s) allocated from:
  |     #0 0x7f31298c7b40 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb40)
  |     #1 0x55eb56141a7b in main bad_str.c:15
  |     #2 0x7f3129419b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)
  | 
  | SUMMARY: AddressSanitizer: 5 byte(s) leaked in 1 allocation(s).
  | it crashed
  `----

  And now with undefined!
  ,----
  | gcc -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -fsanitize=undefined -o bad_str ./bad_str.c
  | echo 33 | ./bad_str 2>&1 || echo it crashed
  `----

  ,----
  | Enter a message:
  | You entered: 33
  `----


* 1.6.8.5 ./double_free.c

  <file:./double_free.c>

  Sanitize ./double_free.c with address!
  ,----
  | gcc -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -fsanitize=address -o double_free ./double_free.c
  | echo 33 | ./double_free 2>&1 || echo it crashed
  `----

  ,----
  | =================================================================
  | ==18019==ERROR: AddressSanitizer: attempting double-free on 0x60d000000040 in thread T0:
  |     #0 0x7f93b7a507a8 in __interceptor_free (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xde7a8)
  |     #1 0x555d99602ffa in main double_free.c:27
  |     #2 0x7f93b75a2b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)
  |     #3 0x555d99602ca9 in _start (/home/hindle1/projects/CMPUT201W20/2020-01/CMPUT201W20B2-public/week10/double_free+0xca9)
  | 
  | 0x60d000000040 is located 0 bytes inside of 132-byte region [0x60d000000040,0x60d0000000c4)
  | freed by thread T0 here:
  |     #0 0x7f93b7a507a8 in __interceptor_free (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xde7a8)
  |     #1 0x555d99602feb in main double_free.c:26
  |     #2 0x7f93b75a2b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)
  | 
  | previously allocated by thread T0 here:
  |     #0 0x7f93b7a50b40 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb40)
  |     #1 0x555d99602e7d in main double_free.c:21
  |     #2 0x7f93b75a2b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)
  | 
  | SUMMARY: AddressSanitizer: double-free (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xde7a8) in __interceptor_free
  | ==18019==ABORTING
  | it crashed
  `----

  And now with undefined!
  ,----
  | gcc -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -fsanitize=undefined -o double_free ./double_free.c
  | echo 33 | ./double_free 2>&1 || echo it crashed
  `----

  ,----
  | How big?
  | 0
  | 1
  | 2
  | 3
  | 4
  | 5
  | 6
  | 7
  | 8
  | 9
  | 10
  | 11
  | 12
  | 13
  | 14
  | 15
  | 16
  | 17
  | 18
  | 19
  | 20
  | 21
  | 22
  | 23
  | 24
  | 25
  | 26
  | 27
  | 28
  | 29
  | 30
  | 31
  | 32
  `----


* 1.6.8.6 ./huge_array.c

  <file:./huge_array.c>

  Sanitize ./huge_array.c with address!
  ,----
  | gcc -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -fsanitize=address -o huge_array ./huge_array.c
  | echo 33 | ./huge_array 2>&1 || echo it crashed
  `----

  ,----
  | 0
  `----


  And now with undefined!
  ,----
  | gcc -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -fsanitize=undefined -o huge_array ./huge_array.c
  | echo 33 | ./huge_array 2>&1 || echo it crashed
  `----

  ,----
  | 0
  `----


* 1.6.8.7 ./malloc_oob.c

  <file:./malloc_oob.c>

  Sanitize ./malloc_oob.c with address!
  ,----
  | gcc -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -fsanitize=address -o malloc_oob ./malloc_oob.c
  | echo 33 | ./malloc_oob 2>&1 || echo it crashed
  `----

  ,----
  | =================================================================
  | ==18056==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60d0000001d0 at pc 0x5580eaaf9fa2 bp 0x7fffab364aa0 sp 0x7fffab364a90
  | READ of size 4 at 0x60d0000001d0 thread T0
  |     #0 0x5580eaaf9fa1 in main malloc_oob.c:26
  |     #1 0x7f20b589ab96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)
  |     #2 0x5580eaaf9ca9 in _start (/home/hindle1/projects/CMPUT201W20/2020-01/CMPUT201W20B2-public/week10/malloc_oob+0xca9)
  | 
  | Address 0x60d0000001d0 is a wild pointer.
  | SUMMARY: AddressSanitizer: heap-buffer-overflow malloc_oob.c:26 in main
  | Shadow bytes around the buggy address:
  |   0x0c1a7fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  |   0x0c1a7fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  |   0x0c1a7fff8000: fa fa fa fa fa fa fa fa 00 00 00 00 00 00 00 00
  |   0x0c1a7fff8010: 00 00 00 00 00 00 00 00 04 fa fa fa fa fa fa fa
  |   0x0c1a7fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  | =>0x0c1a7fff8030: fa fa fa fa fa fa fa fa fa fa[fa]fa fa fa fa fa
  |   0x0c1a7fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  |   0x0c1a7fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  |   0x0c1a7fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  |   0x0c1a7fff8070: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  |   0x0c1a7fff8080: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  | Shadow byte legend (one shadow byte represents 8 application bytes):
  |   Addressable:           00
  |   Partially addressable: 01 02 03 04 05 06 07 
  |   Heap left redzone:       fa
  |   Freed heap region:       fd
  |   Stack left redzone:      f1
  |   Stack mid redzone:       f2
  |   Stack right redzone:     f3
  |   Stack after return:      f5
  |   Stack use after scope:   f8
  |   Global redzone:          f9
  |   Global init order:       f6
  |   Poisoned by user:        f7
  |   Container overflow:      fc
  |   Array cookie:            ac
  |   Intra object redzone:    bb
  |   ASan internal:           fe
  |   Left alloca redzone:     ca
  |   Right alloca redzone:    cb
  | ==18056==ABORTING
  | it crashed
  `----

  And now with undefined!
  ,----
  | gcc -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -fsanitize=undefined -o malloc_oob ./malloc_oob.c
  | echo 33 | ./malloc_oob 2>&1 || echo it crashed
  `----

  ,----
  | How big?
  | 0
  `----


  ,----
  | gcc -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -o malloc_oob ./malloc_oob.c 2>&1
  | echo 33 | ./malloc_oob 2>&1 || echo it crashed
  `----

  ,----
  | How big?
  | 0
  `----


* 1.6.8.8 ./malloc_uninit.c

  <file:./malloc_uninit.c>

  Sanitize ./malloc_uninit.c with address!
  ,----
  | gcc -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -fsanitize=address -o malloc_uninit ./malloc_uninit.c
  | echo 33 | ./malloc_uninit 2>&1 || echo it crashed
  `----

  ,----
  | 
  | =================================================================
  | ==18083==ERROR: LeakSanitizer: detected memory leaks
  | 
  | Direct leak of 132 byte(s) in 1 object(s) allocated from:
  |     #0 0x7f0eae866b40 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb40)
  |     #1 0x5576e0747ddd in main malloc_uninit.c:23
  |     #2 0x7f0eae3b8b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)
  | 
  | SUMMARY: AddressSanitizer: 132 byte(s) leaked in 1 allocation(s).
  | it crashed
  `----

  And now with undefined!
  ,----
  | gcc -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -fsanitize=undefined -o malloc_uninit ./malloc_uninit.c
  | echo 33 | ./malloc_uninit 2>&1 || echo it crashed
  `----

  ,----
  | How big?
  | 0
  | 0
  | 0
  | 0
  | 0
  | 0
  | 0
  | 0
  | 0
  | 0
  | 0
  | 0
  | 0
  | 0
  | 0
  | 0
  | 0
  | 0
  | 0
  | 0
  | 0
  | 0
  | 0
  | 0
  | 0
  | 0
  | 0
  | 0
  | 0
  | 0
  | 0
  | 0
  | 0
  `----


* 1.6.8.9 ./segv.c

  <file:./segv.c>

  Sanitize ./segv.c with address!
  ,----
  | gcc -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -fsanitize=address -o segv ./segv.c
  | echo 33 | ./segv 2>&1 || echo it crashed
  `----

  ,----
  | ASAN:DEADLYSIGNAL
  | =================================================================
  | ==18102==ERROR: AddressSanitizer: SEGV on unknown address 0x60d0003d0940 (pc 0x560c86f12fa2 bp 0x7fff2d202fd0 sp 0x7fff2d202f10 T0)
  | ==18102==The signal is caused by a READ memory access.
  |     #0 0x560c86f12fa1 in main segv.c:26
  |     #1 0x7ff5ee923b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)
  |     #2 0x560c86f12ca9 in _start (/home/hindle1/projects/CMPUT201W20/2020-01/CMPUT201W20B2-public/week10/segv+0xca9)
  | 
  | AddressSanitizer can not provide additional info.
  | SUMMARY: AddressSanitizer: SEGV segv.c:26 in main
  | ==18102==ABORTING
  | it crashed
  `----

  And now with undefined!
  ,----
  | gcc -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -fsanitize=undefined -o segv ./segv.c
  | echo 33 | ./segv 2>&1 || echo it crashed
  `----

  ,----
  | it crashed
  `----


* 1.6.8.10 ./simple_uninit.c

  <file:./simple_uninit.c>

  Sanitize ./simple_uninit.c with address!
  ,----
  | gcc -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -fsanitize=address -o simple_uninit ./simple_uninit.c
  | echo 33 | ./simple_uninit 2>&1 || echo it crashed
  `----

  ,----
  | Enter an int:
  | 33
  `----


  And now with undefined!
  ,----
  | gcc -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -fsanitize=undefined -o simple_uninit ./simple_uninit.c
  | echo 33 | ./simple_uninit 2>&1 || echo it crashed
  `----

  ,----
  | Enter an int:
  | 33
  `----


* 1.6.8.11 ./use_after_free.c

  <file:./use_after_free.c>

  Sanitize ./use_after_free.c with address!
  ,----
  | gcc -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -fsanitize=address -o use_after_free ./use_after_free.c
  | echo 33 | ./use_after_free 2>&1 || echo it crashed
  `----

  ,----
  | =================================================================
  | ==18140==ERROR: AddressSanitizer: heap-use-after-free on address 0x60d000000040 at pc 0x5644c37af0b8 bp 0x7ffda1e71410 sp 0x7ffda1e71400
  | READ of size 4 at 0x60d000000040 thread T0
  |     #0 0x5644c37af0b7 in main use_after_free.c:30
  |     #1 0x7f7e1f4abb96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)
  |     #2 0x5644c37aeca9 in _start (/home/hindle1/projects/CMPUT201W20/2020-01/CMPUT201W20B2-public/week10/use_after_free+0xca9)
  | 
  | 0x60d000000040 is located 0 bytes inside of 132-byte region [0x60d000000040,0x60d0000000c4)
  | freed by thread T0 here:
  |     #0 0x7f7e1f9597a8 in __interceptor_free (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xde7a8)
  |     #1 0x5644c37af03c in main use_after_free.c:28
  |     #2 0x7f7e1f4abb96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)
  | 
  | previously allocated by thread T0 here:
  |     #0 0x7f7e1f959b40 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb40)
  |     #1 0x5644c37aee7e in main use_after_free.c:21
  |     #2 0x7f7e1f4abb96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)
  | 
  | SUMMARY: AddressSanitizer: heap-use-after-free use_after_free.c:30 in main
  | Shadow bytes around the buggy address:
  |   0x0c1a7fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  |   0x0c1a7fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  |   0x0c1a7fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  |   0x0c1a7fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  |   0x0c1a7fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  | =>0x0c1a7fff8000: fa fa fa fa fa fa fa fa[fd]fd fd fd fd fd fd fd
  |   0x0c1a7fff8010: fd fd fd fd fd fd fd fd fd fa fa fa fa fa fa fa
  |   0x0c1a7fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  |   0x0c1a7fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  |   0x0c1a7fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  |   0x0c1a7fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  | Shadow byte legend (one shadow byte represents 8 application bytes):
  |   Addressable:           00
  |   Partially addressable: 01 02 03 04 05 06 07 
  |   Heap left redzone:       fa
  |   Freed heap region:       fd
  |   Stack left redzone:      f1
  |   Stack mid redzone:       f2
  |   Stack right redzone:     f3
  |   Stack after return:      f5
  |   Stack use after scope:   f8
  |   Global redzone:          f9
  |   Global init order:       f6
  |   Poisoned by user:        f7
  |   Container overflow:      fc
  |   Array cookie:            ac
  |   Intra object redzone:    bb
  |   ASan internal:           fe
  |   Left alloca redzone:     ca
  |   Right alloca redzone:    cb
  | ==18140==ABORTING
  | it crashed
  `----

  And now with undefined!
  ,----
  | gcc -std=c99 -pedantic -Wall -Wextra -ftrapv -ggdb3 -fsanitize=undefined -o use_after_free ./use_after_free.c
  | echo 33 | ./use_after_free 2>&1 || echo it crashed
  `----

  ,----
  | How big?
  | array[0] = 0
  | array[1] = 1
  | array[2] = 2
  | array[3] = 3
  | array[4] = 4
  | array[5] = 5
  | array[6] = 6
  | array[7] = 7
  | array[8] = 8
  | array[9] = 9
  | array[10] = 10
  | array[11] = 11
  | array[12] = 12
  | array[13] = 13
  | array[14] = 14
  | array[15] = 15
  | array[16] = 16
  | array[17] = 17
  | array[18] = 18
  | array[19] = 19
  | array[20] = 20
  | array[21] = 21
  | array[22] = 22
  | array[23] = 23
  | array[24] = 24
  | array[25] = 25
  | array[26] = 26
  | array[27] = 27
  | array[28] = 28
  | array[29] = 29
  | array[30] = 30
  | array[31] = 31
  | array[32] = 32
  | array[0] = 0
  | array[1] = 0
  | array[2] = 2
  | array[3] = 3
  | array[4] = 4
  | array[5] = 5
  | array[6] = 6
  | array[7] = 7
  | array[8] = 8
  | array[9] = 9
  | array[10] = 10
  | array[11] = 11
  | array[12] = 12
  | array[13] = 13
  | array[14] = 14
  | array[15] = 15
  | array[16] = 16
  | array[17] = 17
  | array[18] = 18
  | array[19] = 19
  | array[20] = 20
  | array[21] = 21
  | array[22] = 22
  | array[23] = 23
  | array[24] = 24
  | array[25] = 25
  | array[26] = 26
  | array[27] = 27
  | array[28] = 28
  | array[29] = 29
  | array[30] = 30
  | array[31] = 31
  | array[32] = 32
  `----


  + 1.6.8.11.1 Generator (ignore)

    This is just code for me to generate part of the slides
